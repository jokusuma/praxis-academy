========================================================================================================
DAY 1 - 20 JAN 2020
========================================================================================================
1.Ikuti langkah2 di sini :
https://code.visualstudio.com/docs/java/java-tutorial

2.Setting java bin di "environment variable" (logo windows -> envi -> tab advance -> environment variable) :
C:\Program Files\Java\jdk-13.0.2\bin
lihat screenshot ini : D:\!belajar-2019\praxis\kelas\week-1\day-1\2020-01-20_10-45-51.png

lihat apakah java sudah jalan :
javac -version

3.Java: Create Java Project command
lalu pilih folder.

4.Buat file hello.java di folder no 3.
public class hello {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}

5.void = keyword java yang berarti tidak mengembalikan nilai untuk diproses di tempat(class) lain.

6.Looping di java :
public class ForLoop {
    public static void main(String args[]) { 
        System.out.println("Looping dengan FOR");
        for (int i=0; i<3; i++) {
            System.out.println("knock" + i);
        }
    }
}

Keterangan :
public static void main(String args[]) { } = line dgn keyword main ini u/ running program nya
System.out.println = ini seperti echo di php


7.Buat file jar
https://stackoverflow.com/questions/1238145/how-to-run-a-jar-file
Create new project di vscode
Lalu buat file .java nya
di terminal arahkah directori ke file App.java
Ketik : 
javac App.java
$ jar cvfe App.jar App App.class
	atau : jar cvfe App.jar App *.class
java -jar App.jar

8.input dari user :
Untuk membuat file *java, harus langsung di dalam folder /src/
Jika di sub-folder nya (src/app), harus pakai package.

https://stackoverflow.com/questions/5287538/how-to-get-the-user-input-in-java


========================================================================================================
DAY 2 - 21 JAN 2020
========================================================================================================

1.Bikin package :
https://www.w3schools.com/java/java_packages.asp

package mypack;
class pack1 {
  public static void main(String[] args) {
    System.out.println("This is my package!");
  }
}

note: 
mypack = nama folder
pack1 = nama file pack1.java

Di terminal di compile =
javac pack1.java

Di terminal di compile untuk bikin folder mypack yg di isi file pack1.class
javac -d . MyPackageClass.java

Setelah di compile, file *java simpan di folder yg sama dengan file *class

2. Gradle
https://docs.gradle.org/5.4.1/userguide/installation.html#installing_manually

Setting gradle nya harus diarahkan ke directori bin :
C:\Gradle\gradle-6.1\bin
lihat ini : https://www.screencast.com/t/uBsSrCOC6XD6

Di environment setting, buat :
variable name : GRADLE_HOME
variable value : C:\Gradle\gradle-6.1\bin

di path, tambahkan : C:\Gradle\gradle-6.1\bin

3. Exception/ERROR handling :
Caranya adalah tambahkan "e" untuk menampilkan error nya.
Contoh nya :
public class excep1 {
    public static void main(String[] args) {
        try {
            String[] students = {"andy", "budi", "chandra"};
            System.out.println(students[3]);
        } catch (Exception e) {
            //TODO: handle exception
            System.out.println("OK" + e);
        } finally {
            System.out.println("Done");
        }       
    }
}

4.Untuk mengeluarkan info error nya apa di terminal, pakai command :
javac namafile.java 

5.Compile beberapa file menjadi 1 jar
Kasus 2B : Bicycle.java dan BicycleDemo.java

    STEP 1 : Buat file "Bicycle.java" yang berisi class Bicycle yaitu object, tanpa main()
    class Bicycle {

        int cadence = 0;
        int speed = 0;
        int gear = 1;

        void changeCadence(int newValue) {
             cadence = newValue;
        }

        void changeGear(int newValue) {
             gear = newValue;
        }

        void speedUp(int increment) {
             speed = speed + increment;   
        }

        void applyBrakes(int decrement) {
             speed = speed - decrement;
        }

        void printStates() {
             System.out.println("cadence:" +
                 cadence + " speed:" + 
                 speed + " gear:" + gear);
        }
    }

    Step 2: buat file BicycleDemo.java yang berisi class BicycleDemo
    class BicycleDemo {
        public static void main(String[] args) {

            // Create two different 
            // Bicycle objects
            Bicycle bike1 = new Bicycle();
            Bicycle bike2 = new Bicycle();

            // Invoke methods on 
            // those objects
            bike1.changeCadence(50);
            bike1.speedUp(10);
            bike1.changeGear(2);
            bike1.printStates();

            bike2.changeCadence(50);
            bike2.speedUp(10);
            bike2.changeGear(2);
            bike2.changeCadence(40);
            bike2.speedUp(10);
            bike2.changeGear(3);
            bike2.printStates();
        }
    }

    Step 3: Buat file .class untuk semua file *java (Bicycle.java dan BicycleDemo.java)
    Di terminal tuliskan = javac *.java

    Step 4: Compile semua file *class ke dlm 1 file jar
    Di terminal tuliskan = jar cvfe Bicycle.jar BicycleDemo *.class
    keterangan =
        Bicycle.jar -> ini nama output file jar nya
        BicycleDemo -> main class nya
        *.class = semua file dengan extension class

    Step 5: Coba jalankan file jar nya 
    Di terminal tuliskan = java -jar Bicycle.jar

    Screenshot nya =
    https://www.screencast.com/t/BVejeqZX

================================================================================================
DAY 3 - 23 JAN 2020
================================================================================================
Annotation : https://beginnersbook.com/2014/09/java-annotations/
1.Anotation bisa seperti @author, namanya anotation with element
2.Instead of using anotation, programmer usually use comment (seperti yg di bawah  line public class Materi1)
3.Penulisan annotation yang lebih tepat adalah dengan menggunakan @interface ClassPreamble {} lalu di bawah nya di definisikan @classpreamble 
4.Untuk mengimport dari@ClassPreamble ke java doc, gunakan @Document di atas line @interace
5.Diatas anotation harus ada komen yang menjelaskan detaila anotation untuk apa

Annotation yang penting adalah :
1.Buat file SuperBase.java
public class SuperBase {
    @Deprecated
    // @Override
    public void Display(){
        System.out.println("Display Superbase");
    }
}
2.Buat file DeprecatedTest.java
public class DeprecatedTest extends SuperBase
{
    //@Deprecated
    @Override
    public void Display()
    {
        System.out.println("Deprecatedtest display()");
    }
    
    @SuppressWarnings("deprecation")
    public static void main(String args[])
    {
        DeprecatedTest d1 = new DeprecatedTest();
        d1.Display();
        SuperBase d2= new SuperBase();
        d2.Display();
    }
}
Keterangan :
Karena Display() di file SuperBase.java di deprecated, maka d2.Display() dicoret.
Pada saat di beri @SuppressWarnings("deprecation"), maka coret akan hilang


--------------------
JAVADOC : The JDK tool that generates API documentation from documentation comments.
https://www.oracle.com/technetwork/articles/javase/index-137868.html

penjelasan singkat : https://www.baeldung.com/javadoc

1.Javadoc comments structure look very similar to a regular multi-line comment, but the key difference is the extra asterisk at the beginning:

// This is a single line comment
 
/*
 * This is a regular multi-line comment
 */
 
/**
 * This is a Javadoc
 */

2.Javadoc at Class Level
/**
* Hero is the main entity we'll be using to . . .
* 
* Please see the {@link com.baeldung.javadoc.Person} class for true identity
* @author Captain America
* 
*/
public class SuperHero extends Person {
    // fields and methods
}

3.Javadoc at Field Level
/**
 * The public name of a hero that is common knowledge
 */
private String heroName;

4.Javadoc at Method Level
/**
 * <p>This is a simple description of the method. . .
 * <a href="http://www.supermanisthegreatest.com">Superman!</a>
 * </p>
 * @param incomingDamage the amount of incoming damage
 * @return the amount of health hero has after attack
 * @see <a href="http://www.link_to_jira/HERO-402">HERO-402</a>
 * @since 1.0
 */
public int successfullyAttacked(int incomingDamage) {
    // do things
    return 0;
}

5.Order of Tags
Include tags in the following order:

@author (classes and interfaces only, required)
@version (classes and interfaces only, required. See footnote 1)
@param (methods and constructors only)
@return (methods only)
@exception (@throws is a synonym added in Javadoc 1.2)
@see
@since
@serial (or @serialField or @serialData)
@deprecated (see How and When To Deprecate APIs)

6. OOP
BoundExmp<Y> bey = new BoundExmp<Y>(new Y()); // Buat object Bey dari class BoundExmp
bey.doRunTest(); // memanggi method doRuntest (yg ada di class BoundExmp yg sdh di def sebagai "bey)


======================================================================
JAVA BASICS
https://www.w3schools.com/java/java_getstarted.asp

1.In Java, every application begins with a class name, and that class must match the filename.
2.A class should always start with an uppercase first letter. 
    (jadi, nama file nya jg diawali huruf besar)
3.Every line of code that runs in Java must be inside a class
    public class MyClass {
      public static void main(String[] args) {
        System.out.println("Hello World");
      }
    }
4.file java harus di complile jadi *class dulu 
    C:\Users\Your Name>javac MyClass.java
    lalu di jalan kan class nya di CMD
    C:\Users\Your Name>java MyClass
5.Method yg sering digunakan :
    main()
    println()
6.Komen di java = di php
7.Variable di java :
    String = text
    int = angka (tanpa desimal)
    float = angka desimal
    char = single character / huruf tunggal
    boolean = T/F
    Kenapa kok ada tipe data seperti ini? karena masing2 tipe data punya batasan size byte nya.
        https://www.w3schools.com/java/java_data_types.asp
8.To create a variable, you must specify the type and assign it a value:
    type variable = value;
        String name = "John";
        float myFloatNum = 5.99f;
        char myLetter = 'D';
        boolean myBool = true;
        int myNum = 15;
    You can add the final keyword if you don't want others (or yourself) to overwrite existing values
        final int myNum = 15;
9.Display variable
    String name = "John";
    System.out.println("Hello " + name);
10.Declare Many Variables
    int x = 5, y = 6, z = 50;
    System.out.println(x + y + z);











======================================================================