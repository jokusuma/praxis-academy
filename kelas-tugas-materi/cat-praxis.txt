========================================================================================================
DAY 1 - 20 JAN 2020
========================================================================================================
1.Ikuti langkah2 di sini :
https://code.visualstudio.com/docs/java/java-tutorial

2.Setting java bin di "environment variable" (logo windows -> envi -> tab advance -> environment variable) :
C:\Program Files\Java\jdk-13.0.2\bin
lihat screenshot ini : D:\!belajar-2019\praxis\kelas\week-1\day-1\2020-01-20_10-45-51.png

lihat apakah java sudah jalan :
javac -version

3.Java: Create Java Project command
lalu pilih folder.

4.Buat file hello.java di folder no 3.
public class hello {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}

5.void = keyword java yang berarti tidak mengembalikan nilai untuk diproses di tempat(class) lain.

6.Looping di java :
public class ForLoop {
    public static void main(String args[]) { 
        System.out.println("Looping dengan FOR");
        for (int i=0; i<3; i++) {
            System.out.println("knock" + i);
        }
    }
}

Keterangan :
public static void main(String args[]) { } = line dgn keyword main ini u/ running program nya
System.out.println = ini seperti echo di php


7.Buat file jar
https://stackoverflow.com/questions/1238145/how-to-run-a-jar-file
Create new project di vscode
Lalu buat file .java nya
Buat file manifest nya
    Manifest-version: 1.0
    Main-Class: BicycleRun (ini adalah class yg mengandung "public static void main(String[] args) {}")
Di terminal arahkah directori ke file App.java
Ketik : 
javac App.java
$ jar cvfe App.jar App App.class
	atau : jar cvfe App.jar App *.class
    App = class yg mengandung "public static void main(String[] args) {}"
java -jar App.jar

8.input dari user :
Untuk membuat file *java, harus langsung di dalam folder /src/
Jika di sub-folder nya (src/app), harus pakai package.

https://stackoverflow.com/questions/5287538/how-to-get-the-user-input-in-java


========================================================================================================
DAY 2 - 21 JAN 2020
========================================================================================================

1.Bikin package : (package = namespace)
https://www.w3schools.com/java/java_packages.asp

package mypack;
class pack1 {
  public static void main(String[] args) {
    System.out.println("This is my package!");
  }
}

note: 
mypack = nama folder
pack1 = nama file pack1.java

Di terminal di compile =
javac pack1.java

Di terminal di compile untuk bikin folder mypack yg di isi file pack1.class
javac -d . MyPackageClass.java

Setelah di compile, file *java simpan di folder yg sama dengan file *class

2. Gradle
https://docs.gradle.org/5.4.1/userguide/installation.html#installing_manually

Setting gradle nya harus diarahkan ke directori bin :
C:\Gradle\gradle-6.1\bin
lihat ini : https://www.screencast.com/t/uBsSrCOC6XD6

Di environment setting, buat :
variable name : GRADLE_HOME
variable value : C:\Gradle\gradle-6.1\bin

di path, tambahkan : C:\Gradle\gradle-6.1\bin

3. Exception/ERROR handling :
Caranya adalah tambahkan "e" untuk menampilkan error nya.
Contoh nya :
public class excep1 {
    public static void main(String[] args) {
        try {
            String[] students = {"andy", "budi", "chandra"};
            System.out.println(students[3]);
        } catch (Exception e) {
            //TODO: handle exception
            System.out.println("OK" + e);
        } finally {
            System.out.println("Done");
        }       
    }
}

4.Untuk mengeluarkan info error nya apa di terminal, pakai command :
javac namafile.java 

5.Compile beberapa file menjadi 1 jar
Kasus 2B : Bicycle.java dan BicycleDemo.java

    STEP 1 : Buat file "Bicycle.java" yang berisi class Bicycle yaitu object, tanpa main()
    class Bicycle {

        int cadence = 0;
        int speed = 0;
        int gear = 1;

        void changeCadence(int newValue) {
             cadence = newValue;
        }

        void changeGear(int newValue) {
             gear = newValue;
        }

        void speedUp(int increment) {
             speed = speed + increment;   
        }

        void applyBrakes(int decrement) {
             speed = speed - decrement;
        }

        void printStates() {
             System.out.println("cadence:" +
                 cadence + " speed:" + 
                 speed + " gear:" + gear);
        }
    }

    Step 2: buat file BicycleDemo.java yang berisi class BicycleDemo
    class BicycleDemo {
        public static void main(String[] args) {

            // Create two different 
            // Bicycle objects
            Bicycle bike1 = new Bicycle();
            Bicycle bike2 = new Bicycle();

            // Invoke methods on 
            // those objects
            bike1.changeCadence(50);
            bike1.speedUp(10);
            bike1.changeGear(2);
            bike1.printStates();

            bike2.changeCadence(50);
            bike2.speedUp(10);
            bike2.changeGear(2);
            bike2.changeCadence(40);
            bike2.speedUp(10);
            bike2.changeGear(3);
            bike2.printStates();
        }
    }

    Step 3: Buat file .class untuk semua file *java (Bicycle.java dan BicycleDemo.java)
    Di terminal tuliskan = javac *.java

    Step 4: Compile semua file *class ke dlm 1 file jar
    Di terminal tuliskan = jar cvfe Bicycle.jar BicycleDemo *.class
    keterangan =
        Bicycle.jar -> ini nama output file jar nya
        BicycleDemo -> main class nya
        *.class = semua file dengan extension class

    Step 5: Coba jalankan file jar nya 
    Di terminal tuliskan = java -jar Bicycle.jar

    Screenshot nya =
    https://www.screencast.com/t/BVejeqZX

================================================================================================
DAY 3 - 23 JAN 2020
================================================================================================
Annotation : https://beginnersbook.com/2014/09/java-annotations/
1.Anotation bisa seperti @author, namanya anotation with element
2.Instead of using anotation, programmer usually use comment (seperti yg di bawah  line public class Materi1)
3.Penulisan annotation yang lebih tepat adalah dengan menggunakan @interface ClassPreamble {} lalu di bawah nya di definisikan @classpreamble 
4.Untuk mengimport dari@ClassPreamble ke java doc, gunakan @Document di atas line @interace
5.Diatas anotation harus ada komen yang menjelaskan detaila anotation untuk apa

Annotation yang penting adalah :
1.Buat file SuperBase.java
public class SuperBase {
    @Deprecated
    // @Override
    public void Display(){
        System.out.println("Display Superbase");
    }
}
2.Buat file DeprecatedTest.java
public class DeprecatedTest extends SuperBase
{
    //@Deprecated
    @Override
    public void Display()
    {
        System.out.println("Deprecatedtest display()");
    }
    
    @SuppressWarnings("deprecation")
    public static void main(String args[])
    {
        DeprecatedTest d1 = new DeprecatedTest();
        d1.Display();
        SuperBase d2= new SuperBase();
        d2.Display();
    }
}
Keterangan :
Karena Display() di file SuperBase.java di deprecated, maka d2.Display() dicoret.
Pada saat di beri @SuppressWarnings("deprecation"), maka coret akan hilang


--------------------
JAVADOC : The JDK tool that generates API documentation from documentation comments.
https://www.oracle.com/technetwork/articles/javase/index-137868.html

penjelasan singkat : https://www.baeldung.com/javadoc

1.Javadoc comments structure look very similar to a regular multi-line comment, but the key difference is the extra asterisk at the beginning:

// This is a single line comment
 
/*
 * This is a regular multi-line comment
 */
 
/**
 * This is a Javadoc
 */

2.Javadoc at Class Level
/**
* Hero is the main entity we'll be using to . . .
* 
* Please see the {@link com.baeldung.javadoc.Person} class for true identity
* @author Captain America
* 
*/
public class SuperHero extends Person {
    // fields and methods
}

3.Javadoc at Field Level
/**
 * The public name of a hero that is common knowledge
 */
private String heroName;

4.Javadoc at Method Level
/**
 * <p>This is a simple description of the method. . .
 * <a href="http://www.supermanisthegreatest.com">Superman!</a>
 * </p>
 * @param incomingDamage the amount of incoming damage
 * @return the amount of health hero has after attack
 * @see <a href="http://www.link_to_jira/HERO-402">HERO-402</a>
 * @since 1.0
 */
public int successfullyAttacked(int incomingDamage) {
    // do things
    return 0;
}

5.Order of Tags
Include tags in the following order:

@author (classes and interfaces only, required)
@version (classes and interfaces only, required. See footnote 1)
@param (methods and constructors only)
@return (methods only)
@exception (@throws is a synonym added in Javadoc 1.2)
@see
@since
@serial (or @serialField or @serialData)
@deprecated (see How and When To Deprecate APIs)

6. OOP
BoundExmp<Y> bey = new BoundExmp<Y>(new Y()); // Buat object Bey dari class BoundExmp
bey.doRunTest(); // memanggi method doRuntest (yg ada di class BoundExmp yg sdh di def sebagai "bey)


======================================================================
JAVA BASICS
https://www.w3schools.com/java/java_getstarted.asp

1.In Java, every application begins with a class name, and that class must match the filename.
2.A class should always start with an uppercase first letter. 
    (jadi, nama file nya jg diawali huruf besar)
3.Every line of code that runs in Java must be inside a class
    public class MyClass {
      public static void main(String[] args) {
        System.out.println("Hello World");
      }
    }
4.file java harus di complile jadi *class dulu 
    C:\Users\Your Name>javac MyClass.java
    lalu di jalan kan class nya di CMD
    C:\Users\Your Name>java MyClass
5.Method yg sering digunakan :
    main()
    println()
6.Komen di java = di php
7.Variable di java :
    String = text
    int = angka (tanpa desimal)
    float = angka desimal
    char = single character / huruf tunggal
    boolean = T/F
    Kenapa kok ada tipe data seperti ini? karena masing2 tipe data punya batasan size byte nya.
        https://www.w3schools.com/java/java_data_types.asp
8.To create a variable, you must specify the type and assign it a value:
    type variable = value;
        String name = "John";
        float myFloatNum = 5.99f;
        char myLetter = 'D';
        boolean myBool = true;
        int myNum = 15;
    You can add the final keyword if you don't want others (or yourself) to overwrite existing values
        final int myNum = 15;
9.Display variable
    String name = "John";
    System.out.println("Hello " + name);
10.Declare Many Variables
    int x = 5, y = 6, z = 50;
    System.out.println(x + y + z);



----------------------
JAVA OOP
----------------------
1. Class & Object
Class = Car --> tdk bisa dipegang fisik nya
Object = Volvo, BMW, Toyota --> bisa

2.Object punya : atribut & method
    atribut = warna, berat, bentuk, model
    method = di-setir, di-jalankan, di-cat, dll

3.A Class is like an object constructor, or a "blueprint" for creating objects.

4.Cara membuat class
public class MyClass {
    int x = 10;
}

5.Object harus di buat dari class, jd di tulis di dlm class.
To create an object of MyClass, specify the class name, followed by the object name, and use the keyword new:

public class MyClass {
    int x = 10;

    public static void main(String[] args) {
        MyClass myObj = new MyClass();
        System.out.println(myObj.x);
    }
}


6.You can also create an object of a class and access it in another class. This is often used for better organization of classes (one class has all the attributes and methods, while the other class holds the main() method (code to be executed)).

Remember that the name of the java file should match the class name. In this example, we have created two files in the same directory/folder:

MyClass.java
OtherClass.java

jadi ga perlu "include" & ga perlu package/namespace kalo msh dlm 1 dir.

Untuk menjalankan di terminal :
* javac *.java //untuk compile semua file java jadi *class
* java OtherClass //menjalankan class OtherClass yg memiliki main


7.CLASS ATRIBUT
class atribut / atribut = variable (yg ada di dlm class)
    contoh : int x = 10 
    x adalah atribut (letak nya harus di dlm class)

Cara mengakses atribut : 
by creating an object of the class, and by using the dot syntax (.):
    myObj.x
    lihat no 5 di atas

Cara memodifikasi atribut : dgn mengassign nilai baru
public class MyClass{
    int x = 10;

    public static void main(String[] args) {
        MyClass myObj = new MyClass;
        myObj.x =40;
        System.out.println(myObj.x);
    }
}

Praktek nya seperti ini :
D:\!belajar-2019\praxis\github\praxis-academy\kelas-tugas-materi\week-1\day-4\oopbasic\src

public class Human2 {
    String maleName = "Andy";
    String femaleName = "Desy";
    int age = 10;

    public static void main(String[] args) {
        //create new male & female human object (tdk perlu 2 kali bikin object)
        Human2 gender = new Human2();
        //printing
        System.out.println("Nama : " + gender.maleName + ". Umur : " + gender.age);
        System.out.println("Nama : " + gender.femaleName + ". Umur : " + gender.age);
    }
}
    

8.CLASS METHOD
methods are declared within a class, and that they are used to perform certain actions

public class Method1 {
    // create print method yang menampilkan "Hello World"
    static void print(){
        System.out.println("Hello World");
    }
    public static void main(String[] args) {
        // calling the method
        print();
    }
}

Static vs. Non-Static Method
Java programs that have either static or public attributes and methods.

a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects

Contohnya sebagai berikut, bila kode di atas diubah :

public class Method3 {
    // Create a public print method 
    public void printMethod(){
        System.out.println("How Are You?");
    }
    public static void main(String[] args) {
        // Karena printMethod public, maka harus create new object untuk mengakses printMethod()
        Method3 newObj = new Method3();
        // Calling the printMethod()
        newObj.printMethod();
    }
}

Contoh lain :

public class RaceCar {
    // Create method FullSpeed
    public void FullSpeed(){
        System.out.println("Mobil dijalankan dengan kecepatan penuh");
    }
    // Create method Speed. The speed() method accepts an int parameter called maxSpeed
    public void Speed(int maxSpeed){
        // int maxSpeed = 140;
        System.out.println("Kecepatan nya adalah : " + maxSpeed);
    }
    // Call the methods
    public static void main(String[] args) {
        // Create an object to access the public method (to use the RaceCar class and its methods)
        RaceCar lambo = new RaceCar();
        // Calling the method
        lambo.FullSpeed();
        lambo.Speed(200);
    }
}

Constructor parameter :

//Create Class
public class Constructor1 {
    //Create attributes
    public int cadence;
    public int gear;
    public int speed;

    //Create constructor for the Constructor1 class
    //parameter (yg di dlm kurung) adalah yg di kanan sama dengan.
    //bila tidak menggunakan parameter, boleh langsung di assign, misal: cadence = 30
    public Constructor1(int incadence, int ingear, int inspeed){
        cadence = incadence;
        gear = ingear;
        speed = inspeed;
    }

    public static void main(String[] args) {
        //create object to access public method
        Constructor1 newBike = new Constructor1(10, 20, 30);
        System.out.println("Cadence : " + newBike.cadence);
        System.out.println("Gear : " + newBike.gear);
        System.out.println("Speed : " + newBike.speed);
    }
}

Construction parameter dengan string.
Ingat! kalo string harus di petik

// Materi Constructor Paramater
// Create class Mobil
public class Mobil {
    // Create Attributes
    String model;
    String warna;
    int year;
    int maxspeed;

    // Create Constructor for class Mobil
    public Mobil(String modelnya, String warnanya, int yearnya, int maxspeednya){
        model = modelnya;
        warna = warnanya;
        year = yearnya;
        maxspeed = maxspeednya;
    }

    // Running the program
    public static void main(String[] args) {
        // Create object
        // Ingat! kalo string, harus dipetik dua
        Mobil mobilBaru = new Mobil("bmw", "hitam", 2020, 280);
        // Print
        System.out.println(mobilBaru.model + " " + mobilBaru.warna + " " + mobilBaru.year + " " + mobilBaru.maxspeed ); 
    }
}


9.Java Modifiers
https://www.w3schools.com/java/java_modifiers.asp

The public keyword is an access modifier, meaning that it is used to set the access level for classes, attributes, methods and constructors.

We divide modifiers into two groups:

ACCESS MODIFIER - controls the access level
Non-Access Modifiers - do not control access level, but provides other functionality.

For classes, you can use either public or default.
* public : The class is accessible by any other class
* default : The class is only accessible by classes in the same package.

For attributes, methods and constructors, you can use the one of the following:
* public : The code is accessible for all classes
    jadi kalo bikin 2 file, 1 berisi class atribut & construct, 1 nya berisi class u/ menjalankan program, harus pakai public.
* private : The code is only accessible within the declared class
    Tidak bisa dibikin 2 file seperti yg public. Semua harus dlm 1 file.
* default : The code is only accessible in the same package
    sama seperti private
* protected : The code is accessible in the same package and subclasses.

Contoh kode : 
D:\!belajar-2019\praxis\github\praxis-academy\kelas-tugas-materi\week-1\day-4\oopbasic\src\Modifier.java

// JAVA modifier : https://www.w3schools.com/java/java_modifiers.asp
// Create class Modifier
public class Modifier{
    // Create Attributes
    public String name;
    public int age;

    // Create Construct
    public Modifier(String namenya, int agenya){
        name = namenya;
        age = agenya;
    }

    // Create Method
    public void printing(){
        System.out.println(name + " " + age);
    }

    // Run
    public static void main(String[] args) {
        // Create object to access the public
        Modifier newOrang = new Modifier("Jojo", 17);
        // Print
        // System.out.println(newOrang.name + " " + newOrang.age); // kalo pakai ini, tidak perlu create method
        newOrang.printing();
    }
}

NON ACCESS MODIFIER
For classes, you can use either final or abstract:
final  : The class cannot be inherited by other classes
    Sebuah class yang di beri keyword "final", ga akan bisa di extend oleh class lain
abstract  :  The class cannot be used to create objects (To access an abstract class, it must be inherited from another class.)

For attributes and methods, you can use the one of the following:
* final  : Attributes and methods cannot be overridden/modified
* static : Attributes and methods belongs to the class, rather than an object.A static method means that it can be accessed without creating an object of the class
* abstract :  Can only be used in an abstract class, and can only be used on methods. The method does not have a body, for example abstract void run();. The body is provided by the subclass (inherited from). You will learn more about inheritance and abstraction in the Inheritance and Abstraction chapters
* transient :  Attributes and methods are skipped when serializing the object containing them
* synchronized :  Methods can only be accessed by one thread at a time
* volatile : The value of an attribute is not cached thread-locally, and is always read from the "main memory"


10.Java Encapsulation
The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:
    * Declare class variables/attributes as private
    * Provide public get and set methods to access and update the value of a private variable


Get and Set
You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods.

The get method returns the variable value, and the set method sets the value.

Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case:

Contoh :
File 1 = Encapsulation.java
// Create class Encapsulation
public class Encapsulation{
    //Create attribute
    private String name;

    //Getter 
    //The get method returns the value of the variable name.
    public String getName(){
       return name; 
    }

    //Setter
    //The set method takes a parameter (newName) and assigns it to the name variable.
    public void setName(String newName){
        this.name = newName;
    }
}

File 2 = EncapsulationSub.java
public class EncapsulationSub {
    public static void main(String[] args) {
        Encapsulation myObj = new Encapsulation();
        //myObj.name = "John";  // error
        myObj.setName("John"); // Set the value of the name variable to "John"
        //System.out.println(myObj.name); // error 
        System.out.println(myObj.getName());
    }
}

Keterangan :
tidak bisa pakai variable "name" karena attribute di class Encapsulation di set private. sehingga harus pakai setName("John") dan getName().

JAVA PACKAGE 
- sudah kemarin

11.JAVA INHERITANCE (SUB CLASS DAN SUPER CLASS)
In Java, it is possible to inherit attributes and methods from one class to another. We group the "inheritance concept" into two categories:
    * subclass (child) - the class that inherits from another class
    * superclass (parent) - the class being inherited from
    To inherit from a class, use the "extends" keyword.

class Vehicle {
  ...
  // waktu create attribute, gunakan public atau protected, jangan gunakan "private",. 
}

class Car extends Vehicle {
  ...
}


If you don't want other classes to inherit from a class, use the final keyword:


12.JAVA POLYMORPHISM
Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.

For example, think of a superclass called Animal that has a method called animalSound(). Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):

Buat 2 file :
Animal.java : berisi method dan extend
public class Animal {
    //Create Attribute
    // String animalName;

    //Create Construct
    // public Animal(String ianimalName){
    //     animalName = ianimalName;
    // }
    
    //Create Method
    public void animalSound(){
        System.out.println("Animal makes a sound");
    }
}

class Sapi extends Animal{
    public void animalSound(){
        System.out.println("Sapi say: Woooo");
    }
}

AnimalRun.java
public class AnimalRun{
    public static void main(String[] args) {
        //create object
        Animal sapi = new Sapi();
        //print
        sapi.animalSound();
    }
}

NOTE: perhatikan di file ke 2 (AnimalRun.java), new Sapi(); bukan new Animal().

PRAKTEK OOP dgn EXTENDS :
Buat 3 file :

Bicycle.java
//Create class Bicycle
public class Bicycle{
    //Create Attribute - Bicycle has 3 fields
    public int cadence;
    public int gear;
    public int speed;

    //Create Constructor - bicycle has 1 constructor
    public Bicycle(int inCadence, int inGear, int inSpeed){
        cadence = inCadence;
        gear = inGear;
        speed = inSpeed;
    }

    //Create method - bicycle has 4 methods
    public void setCadence(int newValue){
        cadence = newValue;
    }
    public void setGear(int newValue){
        gear = newValue;
    }
    public void ApplyBreak(int decrement){
        speed -= decrement;
    }
    public void SpeedUp(int increment){
        speed += increment;
    }
}

MountainBike.java
public class MountainBike extends Bicycle {
        
    // the MountainBike subclass has
    // one field
    public int seatHeight;

    // the MountainBike subclass has
    // one constructor
    public MountainBike(int startHeight, int startCadence,
                        int startSpeed, int startGear) {
        super(startCadence, startGear, startSpeed);
        seatHeight = startHeight;
    }   
        
    // the MountainBike subclass has
    // one method
    public void setHeight(int newValue) {
        seatHeight = newValue;
    }   

}

BicycleRun.java
public class BicycleRun{
    public static void main(String[] args) {
        //create object
        // Bicycle newBike = new Bicycle(10, 20, 30);
        // System.out.println(newBike.cadence + " " + newBike.gear + " " + newBike.speed);

        //umumnya new method nya sama dengan yg di depan (MountainBike)
        MountainBike newBike = new MountainBike(10, 20, 30, 40);

        System.out.println(newBike.seatHeight);
        System.out.println(newBike.cadence);
        System.out.println(newBike.speed);
        System.out.println(newBike.gear);
    }
}

public "static" ... method dst
Static itu artinya pada saat memanggil method, tidak perlu inisialisasi.
Inisialisasi = menggunakan keyword "new"


======================================================================
DAY 5 
======================================================================
1.serialization & de-serialization in JAVA
https://www.geeksforgeeks.org/serialization-in-java/

Serialization is a mechanism of converting the state of an object into a byte stream. 
    Contoh misal ada app yg mengirim object berupa json atau XML. Maka data itu harus di serialisasi sehingga bisa di baca oleh java.

Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory. 
    Java men-deserialisasi byte stream ke object (json/XML)

This mechanism is used to persist the object.
"To persist state of an object" : 
    apa yg kita kirim = yg kita terima

ilustrasi nya seperti ini : 
https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2016/01/serialize-deserialize-java.png

To make a Java object serializable we implement the java.io.Serializable interface.
The ObjectOutputStream class contains writeObject() method for serializing an Object.
    public final void writeObject(Object obj)
                       throws IOException
The ObjectInputStream class contains readObject() method for deserializing an object.
    public final Object readObject()
                      throws IOException,
                   ClassNotFoundException

Contoh implementasi kode :
https://www.geeksforgeeks.org/serialization-in-java/

2.XML IN JAVA
XML = EXTENSIBLE MARKUP LANGUAGE 
Kayak html tapi ga di define tag2 nya.

XML is a simple text-based language which was designed to store and transport data in plain text format. It stands for Extensible Markup Language. Following are some of the salient features of XML.

    * XML is a markup language.
    * XML is a tag based language like HTML.
    * XML tags are not predefined like HTML.
    * You can define your own tags which is why it is called extensible language.
    * XML tags are designed to be self-descriptive.
    * XML is W3C Recommendation for data storage and data transfer.

Contoh code :
<?xml version = "1.0"?>
<Class>
   <Name>First</Name>
   <Sections>
      <Section>
         <Name>A</Name>
         <Students>
            <Student>Rohan</Student>
            <Student>Mohan</Student>
            <Student>Sohan</Student>
            <Student>Lalit</Student>
            <Student>Vinay</Student>
         </Students>
      </Section>
      
      <Section>
         <Name>B</Name>
         <Students>
            <Student>Robert</Student>
            <Student>Julie</Student>
            <Student>Kalie</Student>
            <Student>Michael</Student>
         </Students>
      </Section>
   </Sections>
</Class>

What is XML Parser?
XML Parser provides a way to access or modify data in an XML document.
    * Dom Parser
    * SAX Parser
    * JDOM Parser
    * StAX Parser
    * XPath Parser
    * DOM4J Parser

DOM Parser
You should use a DOM parser when −
    * You need to know a lot about the structure of a document.
    * You need to move parts of an XML document around (you might want to sort certain elements, for example).
    * You need to use the information in an XML document more than once.

When you parse an XML document with a DOM parser, you get back a tree structure that contains all of the elements of your document.

DOM interfaces
The DOM defines several Java interfaces. Here are the most common interfaces −
    * Node − The base datatype of the DOM.
    * Element − The vast majority of the objects you'll deal with are Elements.
    * Attr − Represents an attribute of an element.
    * Text − The actual content of an Element or Attr.
    * Document − Represents the entire XML document. A Document object is often referred to as a DOM tree.

Common DOM methods
    When you are working with DOM, there are several methods you'll use often −
    * Document.getDocumentElement() − Returns the root element of the document.
    * Node.getFirstChild() − Returns the first child of a given Node.
    * Node.getLastChild() − Returns the last child of a given Node.
    * Node.getNextSibling() − These methods return the next sibling of a given Node.
    * Node.getPreviousSibling() − These methods return the previous sibling of a given Node.
    * Node.getAttribute(attrName) − For a given Node, it returns the attribute with the requested name.

**********
PARSE XML DOCUMENT
U/ melakukan Parse (mengurai) XML Document di java harus menggunakan exception (try - catch)


PRAKTEK 1 - Parse XML Doc: Buat 2 file : DomParserDemo.java dan input.txt (file yg berisi tag XML)

DomParserDemo.java :

// package com.tutorialspoint.xml;
import java.io.File;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

public class DomParserDemo {

   public static void main(String[] args) {

      try {
         File inputFile = new File("src/input.txt");
         DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
         DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
         Document doc = dBuilder.parse(inputFile);
         doc.getDocumentElement().normalize();
         System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
         NodeList nList = doc.getElementsByTagName("student");
         System.out.println("----------------------------");
         
         for (int temp = 0; temp < nList.getLength(); temp++) {
            Node nNode = nList.item(temp);
            System.out.println("\nCurrent Element :" + nNode.getNodeName());
            
            if (nNode.getNodeType() == Node.ELEMENT_NODE) {
               Element eElement = (Element) nNode;
               System.out.println("Student roll no : " 
                  + eElement.getAttribute("rollno"));
               System.out.println("First Name : " 
                  + eElement
                  .getElementsByTagName("firstname")
                  .item(0)
                  .getTextContent());
               System.out.println("Last Name : " 
                  + eElement
                  .getElementsByTagName("lastname")
                  .item(0)
                  .getTextContent());
               System.out.println("Nick Name : " 
                  + eElement
                  .getElementsByTagName("nickname")
                  .item(0)
                  .getTextContent());
               System.out.println("Marks : " 
                  + eElement
                  .getElementsByTagName("marks")
                  .item(0)
                  .getTextContent());
            }
         }
      } catch (Exception e) {
         e.printStackTrace();
      }
   }
}

input.txt :

<?xml version = "1.0"?>
<class>
   <student rollno = "393">
      <firstname>dinkar</firstname>
      <lastname>kad</lastname>
      <nickname>dinkar</nickname>
      <marks>85</marks>
   </student>
   
   <student rollno = "493">
      <firstname>Vaneet</firstname>
      <lastname>Gupta</lastname>
      <nickname>vinni</nickname>
      <marks>95</marks>
   </student>
   
   <student rollno = "593">
      <firstname>jasvir</firstname>
      <lastname>singn</lastname>
      <nickname>jazz</nickname>
      <marks>90</marks>
   </student>
</class>

Output :
Root element :class
----------------------------

Current Element :student
Student roll no : 393
First Name : dinkar
Last Name : kad
Nick Name : dinkar
Marks : 85

Current Element :student
Student roll no : 493
First Name : Vaneet
Last Name : Gupta
Nick Name : vinni
Marks : 95

Current Element :student
Student roll no : 593
First Name : jasvir
Last Name : singn
Nick Name : jazz
Marks : 90

**********
PRAKTEK 2 - QUERY XML DOCUMENT : Buat 2 file QueryXmlFileDemo.java dan input2.txt

QueryXmlFileDemo.java

// package com.tutorialspoint.xml;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;

public class QueryXmlFileDemo {

   public static void main(String argv[]) {
 
      try {
         File inputFile = new File("src/input2.txt");
         DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
         DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
         Document doc = dBuilder.parse(inputFile);
         doc.getDocumentElement().normalize();
         System.out.print("Root element: ");
         System.out.println(doc.getDocumentElement().getNodeName());
         NodeList nList = doc.getElementsByTagName("supercars");
         System.out.println("----------------------------");
         
         for (int temp = 0; temp < nList.getLength(); temp++) {
            Node nNode = nList.item(temp);
            System.out.println("\nCurrent Element :");
            System.out.print(nNode.getNodeName());
            
            if (nNode.getNodeType() == Node.ELEMENT_NODE) {
               Element eElement = (Element) nNode;
               System.out.print("company : ");
               System.out.println(eElement.getAttribute("company"));
               NodeList carNameList = eElement.getElementsByTagName("carname");
               
               for (int count = 0; count < carNameList.getLength(); count++) {
                  Node node1 = carNameList.item(count);
                  
                  if (node1.getNodeType() == node1.ELEMENT_NODE) {
                     Element car = (Element) node1;
                     System.out.print("car name : ");
                     System.out.println(car.getTextContent());
                     System.out.print("car type : ");
                     System.out.println(car.getAttribute("type"));
                  }
               }
            }
         }
      } catch (Exception e) {
         e.printStackTrace();
      }
   }
}

input2.txt

<?xml version = "1.0"?>
<cars>
   <supercars company = "Ferrari">
      <carname type = "formula one">Ferarri 101</carname>
      <carname type = "sports car">Ferarri 201</carname>
      <carname type = "sports car">Ferarri 301</carname>
   </supercars>
   
   <supercars company = "Lamborgini">
      <carname>Lamborgini 001</carname>
      <carname>Lamborgini 002</carname>
      <carname>Lamborgini 003</carname>
   </supercars>
   
   <luxurycars company = "Benteley">
      <carname>Benteley 1</carname>
      <carname>Benteley 2</carname>
      <carname>Benteley 3</carname>
   </luxurycars>
</cars>

output :

Root element: cars
----------------------------

Current Element :
supercarscompany : Ferrari
car name : Ferarri 101
car type : formula one
car name : Ferarri 201
car type : sports car
car name : Ferarri 301
car type : sports car

Current Element :
supercarscompany : Lamborgini
car name : Lamborgini 001
car type :
car name : Lamborgini 002
car type :
car name : Lamborgini 003
car type :

**********
PRAKTEK 3 - Create XML Document

Buat 1 file :
// package com.tutorialspoint.xml;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.io.File;

public class CreateXmlFileDemo {

   public static void main(String argv[]) {

      try {
         DocumentBuilderFactory dbFactory =
         DocumentBuilderFactory.newInstance();
         DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
         Document doc = dBuilder.newDocument();
         
         // root element
         Element rootElement = doc.createElement("cars");
         doc.appendChild(rootElement);

         // supercars element
         Element supercar = doc.createElement("supercars");
         rootElement.appendChild(supercar);

         // setting attribute to element
         Attr attr = doc.createAttribute("company");
         attr.setValue("Ferrari");
         supercar.setAttributeNode(attr);

         // carname element
         Element carname = doc.createElement("carname");
         Attr attrType = doc.createAttribute("type");
         attrType.setValue("formula one");
         carname.setAttributeNode(attrType);
         carname.appendChild(doc.createTextNode("Ferrari 101"));
         supercar.appendChild(carname);

         Element carname1 = doc.createElement("carname");
         Attr attrType1 = doc.createAttribute("type");
         attrType1.setValue("sports");
         carname1.setAttributeNode(attrType1);
         carname1.appendChild(doc.createTextNode("Ferrari 202"));
         supercar.appendChild(carname1);

         // write the content into xml file
         TransformerFactory transformerFactory = TransformerFactory.newInstance();
         Transformer transformer = transformerFactory.newTransformer();
         DOMSource source = new DOMSource(doc);
         StreamResult result = new StreamResult(new File("D:\\!belajar-2019/praxis/github/praxis-academy/kelas-tugas-materi/week-1/day-5/lat-2/src/cars.xml"));
         transformer.transform(source, result);
         
         // Output to console for testing
         StreamResult consoleResult = new StreamResult(System.out);
         transformer.transform(source, consoleResult);
      } catch (Exception e) {
         e.printStackTrace();
      }
   }
}

output :
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<cars>
    <supercars company="Ferrari">
        <carname type="formula one">Ferrari 101</carname>
        <carname type="sports">Ferrari 202</carname>
    </supercars>
</cars>

dan ada file *xml baru. Lihat lokasi penyimpanan file di //write the content into xml file

*****************
PRAKTEK MODIFY XML DOCUMENT

Buat file xml :
<?xml version = "1.0" encoding = "UTF-8" standalone = "no"?>
<cars>
   <supercars company = "Ferrari">
      <carname type = "formula one">Ferrari 101</carname>
      <carname type = "sports">Ferrari 202</carname>
   </supercars>
   
   <luxurycars company = "Benteley">
      <carname>Benteley 1</carname>
      <carname>Benteley 2</carname>
      <carname>Benteley 3</carname>
   </luxurycars>
</cars>


Buat file ModifyXmlFileDemo.java

// package com.tutorialspoint.xml;

import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class ModifyXmlFileDemo {

   public static void main(String argv[]) {

      try {
         File inputFile = new File("src/input3modif.xml");
         DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
         DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
         Document doc = docBuilder.parse(inputFile);
         Node cars = doc.getFirstChild();
         Node supercar = doc.getElementsByTagName("supercars").item(0);
         
         // update supercar attribute
         NamedNodeMap attr = supercar.getAttributes();
         Node nodeAttr = attr.getNamedItem("company");
         nodeAttr.setTextContent("Lamborigini");

         // loop the supercar child node
         NodeList list = supercar.getChildNodes();
         
         for (int temp = 0; temp < list.getLength(); temp++) {
            Node node = list.item(temp);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
               Element eElement = (Element) node;
               if ("carname".equals(eElement.getNodeName())) {
                  if("Ferrari 101".equals(eElement.getTextContent())) {
                     eElement.setTextContent("Lamborigini 001");
                  }
                  if("Ferrari 202".equals(eElement.getTextContent()))
                     eElement.setTextContent("Lamborigini 002");
               }
            }
         }
         NodeList childNodes = cars.getChildNodes();
         
         for(int count = 0; count < childNodes.getLength(); count++) {
            Node node = childNodes.item(count);
            
            if("luxurycars".equals(node.getNodeName()))
               cars.removeChild(node);
         }

         // write the content on console
         TransformerFactory transformerFactory = TransformerFactory.newInstance();
         Transformer transformer = transformerFactory.newTransformer();
         DOMSource source = new DOMSource(doc);
         System.out.println("-----------Modified File-----------");
         StreamResult consoleResult = new StreamResult(System.out);
         transformer.transform(source, consoleResult);
      } catch (Exception e) {
         e.printStackTrace();
      }
   }
}

output :
-----------Modified File-----------
<?xml version = "1.0" encoding = "UTF-8" standalone = "no"?>

<cars>
   <supercars company = "Lamborigini">
      <carname type = "formula one">Lamborigini 001</carname>
      <carname type = "sports">Lamborigini 002</carname>
   </supercars>
</cars> 



Untuk selanjutnya, lihat di web berikut :
Java SAX Parser
https://www.tutorialspoint.com/java_xml/java_sax_parser.htm

SAX works well for an XML document that arrives over a stream.
Lebih ringan dibandingkan DOM

JDOM XML Parser
https://www.tutorialspoint.com/java_xml/java_jdom_parser.htm

Java StAX Parser
https://www.tutorialspoint.com/java_xml/java_stax_parser.htm

Java XPath Parser
https://www.tutorialspoint.com/java_xml/java_xpath_parser.htm
XPath is an official recommendation of the World Wide Web Consortium (W3C).

XPath parser is used to navigate XML Documents only. It is better to use DOM parser for creating XML. Please refer the Java DOM Parser section for the same.

Java DOM4J Parser
https://www.tutorialspoint.com/java_xml/java_dom4j_parser.htm

-----------------------
JSON with Java
https://www.tutorialspoint.com/json/json_java_example.htm

************
ENCODING JSON IN JAVA

//download dari https://github.com/fangyidong/json-simple , lalu di copy folder "org" yg ada di dlm "src/main"
//lalu masukkan folder "org" tsb ke dlm folder src kita
import org.json.simple.JSONObject;

class JsonEncodeDemo {

   public static void main(String[] args) {
      JSONObject obj = new JSONObject();

      obj.put("name", "foo");
      obj.put("num", new Integer(100));
      obj.put("balance", new Double(1000.21));
      obj.put("is_vip", new Boolean(true));

      System.out.print(obj);
   }
}

**********
DECODE JSON IN JAVA

import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import org.json.simple.parser.ParseException;
import org.json.simple.parser.JSONParser;

class JsonDecodeDemo {

   public static void main(String[] args) {
    
      JSONParser parser = new JSONParser();
      String s = "[0,{\"1\":{\"2\":{\"3\":{\"4\":[5,{\"6\":7}]}}}}]";
        
      try{
         Object obj = parser.parse(s);
         JSONArray array = (JSONArray)obj;
            
         System.out.println("The 2nd element of array");
         System.out.println(array.get(1));
         System.out.println();

         JSONObject obj2 = (JSONObject)array.get(1);
         System.out.println("Field \"1\"");
         System.out.println(obj2.get("1"));    

         s = "{}";
         obj = parser.parse(s);
         System.out.println(obj);

         s = "[5,]";
         obj = parser.parse(s);
         System.out.println(obj);

         s = "[5,,2]";
         obj = parser.parse(s);
         System.out.println(obj);
      }catch(ParseException pe) {
        
         System.out.println("position: " + pe.getPosition());
         System.out.println(pe);
      }
   }
}

======================================================================

JSON - JAVASCRIPT OBJECT NOTATION
https://www.tutorialspoint.com/json/index.htm

Uses of JSON
    * It is used while writing JavaScript based applications that includes browser extensions and websites.

    * JSON format is used for serializing and transmitting structured data over network connection.

    * It is primarily used to transmit data between a server and web applications.

    * Web services and APIs use JSON format to provide public data.

    * It can be used with modern programming languages.

Characteristics of JSON
    * JSON is easy to read and write.
    * It is a lightweight text-based interchange format.
    * JSON is language independent.

Contoh kode json :
{
   "book": [
    
      {
         "id":"01",
         "language": "Java",
         "edition": "third",
         "author": "Herbert Schildt"
      },
    
      {
         "id":"07",
         "language": "C++",
         "edition": "second",
         "author": "E.Balagurusamy"
      }
   ]
}

Cara penulisan json :
// Awali dengan {} --> object
// pasangan name/value di petik ""
// pemisah koma
// bila value nya adalah array, gunakan []
// array value itu bisa di isi dengan object {}
{
    "book": "Dongeng Pagi",
    "laptop": [
        {
            "brand":"Acer",

        },
    ]
}

JSON data type :
https://www.tutorialspoint.com/json/json_data_types.htm

*****************
BACA FILE JSON DARI JAVA (Parse Json file to JAVA)
https://www.tutorialspoint.com/how-to-read-the-contents-of-a-json-file-using-java

buat file test.json
{
   "ID": "1",
   "First_Name": "Jojo",
   "Last_Name": "Indra",
   "Date_Of_Birth": "1908-12-05",
   "Place_Of_Birth":"Surabaya",
   "Country": "Indonesia"
}

-----------------
Lalu buat file ReadingJSON.java

// https://www.tutorialspoint.com/how-to-read-the-contents-of-a-json-file-using-java
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
public class ReadingJSON {
   public static void main(String args[]) {
      //Creating a JSONParser object
      JSONParser jsonParser = new JSONParser();
      try {
         //Parsing the contents of the JSON file
         JSONObject jsonObject = (JSONObject) jsonParser.parse(new FileReader("src/test.json"));
         String id = (String) jsonObject.get("ID");
         String first_name = (String) jsonObject.get("First_Name");
         String last_name = (String) jsonObject.get("Last_Name");
         String date_of_birth = (String) jsonObject.get("Date_Of_Birth");
         String place_of_birth = (String) jsonObject.get("Place_Of_Birth");
         String country = (String) jsonObject.get("Country");
         //Forming URL
         System.out.println("Contents of the JSON are: ");
         System.out.println("ID :"+id);
         System.out.println("First name: "+first_name);
         System.out.println("Last name: "+last_name);
         System.out.println("Date of birth: "+date_of_birth);
         System.out.println("Place of birth: "+place_of_birth);
         System.out.println("Country: "+country);
         System.out.println(" ");
      } catch (FileNotFoundException e) {
            e.printStackTrace();
      } catch (IOException e) {
         e.printStackTrace();
      } catch (ParseException e) {
         e.printStackTrace();
      }
   }
}










======================================================================

Untuk hari ini, saya belajar ... hal.
yang pertama...
yang kedua ...

Untuk yg pertama saya sdh/blm paham
kendala nya 
dst
sekian, terimakasih.
